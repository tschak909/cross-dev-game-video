* Introduction - RAS

* In this video

** A quick explanation of what must be done

- Write the code
- Assemble the code
- Get the code onto the target system

* Native editing and assembly on Atari

** Atari Specs

- 48K of RAM $899
  6502 @ 1.79MHz
  4 5 1/4" SS/SD disk drives of 90K each $399 x 4 ($1596.00) 360K total disk space
  An 825 Printer $219
  850 Interface $199 (parallel for printer, serial for brown box transfer)
  EPROM burner $150
  $3063 estimated

  oh, and AMAC is $199

** Native editing and assembly on Atari

- AMAC disk contains DOS 2.0S, assembler, and MEDIT
  
- Boot fujinet config
- Insert into drives
  D1:AMAC.atr
  D2:digdug-d1.atr (source code on first three)
  D3:digdug-d2.atr
  D4:digdug-d3.atr
  D5:digdug-d4.atr (binary output and listing)
- boot
- L MEDIT
  D3:TITLE.ASM
  Replace BLUE with GREEN
  OPTION EXIT1
- L AMAC
- SWAP UNTIL DIGDUG-D1 is in D1:
- D1:DIGDUG.ASM H=D4:DIGDUG.OBJ L=P: R=F
- expect assembly to be roughly 1K/min
- SWAP UNTIL AMAC is in D1:
- exit
- L D4:DIGDUG.OBJ

* Cross assembly of 2600 Combat on S-100

** S-100 Specs

- IMSAI 8080 @ 2MHz $600
  VT100 terminal $995
  64K of RAM $1000 (due to fluctuating RAM prices)
  2 8" SS/SD disk drives of 256K each, $1000.00 est
  Tarbell SD disk controller $399
  Centronics 739 printer ($399)
  SIO card $299
  $4692 estimated total

** Cross-assembly of Combat

- Insert 2600dev.dsk into driveb.dsk
- turn on system
- RUN switch
- DIR A:
  DIR B:
- WM B:COMBAT.ASM
  FIND PF0_0
  CHANGE $10 to $20
  E
- ACT65 B:COMBAT.ASM L=COMBAT.PRN R=F
  MLOAD B:COMBAT.BIN=B:COMBAT.HEX
  B:
  A:W COMBAT.BIN
- Load COMBAT.BIN in STELLA.

** Cross-assembly of a 5200 Test program

- Turn off system
- cd disks
  cp library/5200dev.dsk driveb.dsk
- turn on system
- RUN switch
  DIR B:
  WM B:RAINBOW.ASM
- I

```
;;
;; Simple Rainbow test for Atari 5200
;;

SDMCTL  EQU     $07
WSYNC   equ $D40A
COLBK   EQU $C01A

        org $4000

START   LDA #$00
        STA SDMCTL
loop    sta WSYNC
        INC $0C
        lda $0C
        sta COLBK
        jmp loop

        org $BFE8
        DB 'rainbow test cart   '

        org $BFFC
        DB $58,$54

        org $BFFE
        dw START
```
- ESC
- E
- ACT65 B:RAINBOW
- MLOAD B:RAINBOW.BIN=B:RAINBOW.HEX
- B:
- A:W RAINBOW.BIN
- load RAINBOW.BIN in altirra

** Second test program for 5200

- WM B:PMTEST.ASM
- I
```
; Atari 5200 "Hello World" sample code
; Written by Daniel Boris (dboris@comcast.net)
; modified by Thom Cherryhomes for ACT65/AMAC
;
; ************ Hardware Adresses ***************************

DMACTL  equ     $D400           ;DMA Control
SDMCTL equ     $07             ;DMA Control Shadow
PMBASE  equ     $D407           ;PM base address
CHBASE  equ     $D409           ;Character set base
GRACTL  equ     $C01D           ;Graphics control
PRIOR   equ     $C01B           ;PM priorities
SIZEP0  equ     $C001           ;Size of player 0
HPOSP0  equ     $C000           ;Horizontal position player 0
COLPM0  equ     $C012           ;Player 0 color
DLISTL  equ     $D402           ;Display list lo
DLISTH  equ     $D403           ;Display list hi
SDLSTL equ     $05             ;Display list lo shadow
SDLSTH equ     $06             ;Display list hi shadow
CHACTL  equ     $D401           ;Character control
NMIEN   equ     $D40E           ;NMI Enable
PCOLR0 equ      $08            ;Player/missile 0 color shadow
PCOLR1 equ      $09            ;Player/missile 0 color shadow
PCOLR2 equ      $0A            ;Player/missile 0 color shadow
PCOLR3 equ      $0B            ;Player/missile 0 color shadow
COLOR0  equ     $0C             ;Color 0 shadow
COLOR1  equ     $0D             ;Color 1 shadow
COLOR2  equ     $0E             ;Color 2 shadow
COLOR3  equ     $0F             ;Color 3 shadow

;*************** Variable ***********************
line equ  $20                   ;Current DLI line
pm0pos equ $21                  ;Current pos of P0

;*************** Start of Code *******************

        org     $4000           ;Start of cartridge area
Start
        sei                     ;Disable interrupts
        cld                     ;Clear decimal mode

;************** Clear zero page and hardware ******

        ldx     #$00
        lda     #$00
CRLP1    
        sta     $00,x           ;Clear zero page
        sta     $D400,x         ;Clear ANTIC
        sta     $C000,x         ;Clear GTIA
        sta     $E800,x         ;Clear POKEY
        dex
        bne     CRLP1

;************* Clear RAM **************************

        ldy     #$00            ;Clear Ram
        lda     #$02            ;Start at $0200
        sta     $81             
        lda     #$00
        sta     $80
CRLP3
        lda     #$00
        sta     [$80],y         ;Store data
        iny                     ;Next byte
        bne     CRLP3         ;Branch if not done page
        inc     $81             ;Next page
        lda     $81
        cmp     #$40            ;Check if end of RAM
        bne     CRLP3         ;Branch if not

;************* Setup display list *******************


        ldx     #$21            ;Number of bytes in list
dlloop                          ;Copy display list to RAM
        lda     dlist,x         ;Get byte
        sta     $1000,x         ;Copy to RAM
        dex                     ;next byte
        bpl     dlloop

;************ Setup IRQ vectors *********************

        lda     #$03            ;point IRQ vector
        sta     $200            ;to BIOS routine
        lda     #$FC
        sta     $201
        lda     #$B8            ;point VBI vector
        sta     $202            ;to BIOS routine
        lda     #$FC
        sta     $203
        lda     #$B2            ;point Deferred VBI
        sta     $204            ;to BIOS routine
        lda     #$FC
        sta     $205
        lda     #$00            ;point DLI vector
        sta     $206            ;to custom routine
        lda     #$50
        sta     $207
        lda     #$00
        sta     line
        
;************* Setup hardware registers *************

        lda     #$22            ;Set color PF0
        sta     COLOR0
        lda     #$0F            ;Set color PF1
        sta     COLOR1
        lda     #$84            ;Set color PF2
        sta     COLOR2             
        lda     #$00            ;Set Display list pointer
        sta     SDLSTL
        sta     DLISTL
        lda     #$10
        sta     SDLSTH
        sta     DLISTH
        lda     #$f8            ;Set Charcter Set Base
        sta     CHBASE
        lda     #$22            ;Enable DMA
        sta     SDMCTL
        lda     #$C0            ;Enable NMI + DLI
        sta     NMIEN

;************ Draw display graphics *******************

        ldy     #$02            ;Draw bars on screen
        lda     #$18            ;Screen memory starts at $1800
        sta     $81             
        lda     #$00
        sta     $80
        ldx     #$18
CRLP5
        lda     #$FF            ;Bar 4 pixels wide of color 3
        sta     [$80],y         ;Store data
        iny                     
        iny                     ;Skip 4 pixels
        lda     #$55            ;Bar 4 pixels wide of color 1
        sta     [$80],y         ;Store data
        iny
        iny                     ;Skip 4 pixels
        lda     #$AA            ;Bar 4 pixels wide of color 2
        sta     [$80],y         ;Store data
        tya
        clc         
        adc     #$06            ;Move pointer to next line
        tay
        dex                     ;Next line
        bne     CRLP5         ;Branch if not done

;************* Setup Player/Missile registers ***************

        lda     #$3A           ;Enable DMA [single line resolution/
        sta     SDMCTL        ;normal background]
        lda     #$20           ;Set PM base address [$200]
        sta     PMBASE
        lda     #$03           ;Enable players and missiles
        sta     GRACTL
        lda     #$16           ;Color of player 0
        sta     PCOLR0
        ldy     #$00
        lda     #$03           ;Size of player 0
        sta     SIZEP0
        lda     #$01           ;Give players priority over playfield
        sta     PRIOR
      

;************ Copy player data to RAM ********************************

pmloop1        
        lda     pm1,y           ;Get data         
        sta     $2430,y         ;Write it into RAM
        sta     $24C0,y
        iny
        cpy     #$08            ;Copy 8 bytes
        bne     pmloop1

;************ Move player ********************************************

        ldx     #$20            ;Starting position of player
MVLP1
        jsr     WVB          ;Wait for a vertical bank
        lda     #$00            ;Reset line counter
        sta     line
        stx     HPOSP0          ;Set position of player
        stx     pm0pos          ;Save position for DLI
        inx
        cpx     #$B0            ;Check for end of move
        bne     MVLP1         ;If not keep moving right
        lda     #$04            ;Give playfield priority player
        sta     PRIOR

MVLP2
        jsr     WVB          ;Wait for a vertical blank
        lda     #$00            ;Reset line counter
        sta     line
        stx     HPOSP0          ;Set position of player
        stx     pm0pos          ;Save position for DLI
        dex
        cpx     #$40            ;Check for end of move
        bne     MVLP2         ;If not keep moving left
        lda     #$01            ;Give player priority over playfield
        sta     PRIOR
        jmp     MVLP1         ;Continue looping

;************ Wait for vertical blank ************************

WVB
        lda     $02     ;Read timer [this is incremented during VB]
WVB2
        cmp     $02         ;Did it change?
        beq     WVB2     ;If not keep waiting
        rts

;************ Display list interrupt ************************

        org  $5000
dli
        pha             ;Save A
        inc line        ;Increment the line counter
        lda line        ;Past the fifth DLI?
        cmp #$05
        bne done        ;If not then exit DLI
        lda pm0pos      ;Get player 0 position
        eor #$FF        ;Invert it
        sta HPOSP0      ;Set player 0 position
        lda #$0F        ;Change player color
        sta COLPM0      ;
        ; Note: Player color is changed in hardware register not the shadow
        ; register so it takes effect immediatly. 
done
        pla             ;Restore A
        rti             ;Done

;************* Display list data ****************************

        org     $b000
dlist   DB     $70,$70,$70      ;24 blank scanlines
        DB     $48,$00,$18      ;Mode 8 and Load memory scan $1800
        DB     $88,$88,$88,$88,$88,$88,$88   ;23 more line of mode 8
        DB     $88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88,$88
        DB     $88,$88,$88
        DB     $41,$00,$10       ;Jump back to start at $1000

;************* Player shape *********************************

pm1     DB     $3C      ; ..****..
        DB     $42      ; .*....*.
        DB     $A5      ; *.*..*.*
        DB     $81      ; *......*
        DB     $A5      ; *.*..*.* 
        DB     $99      ; *..**..*
        DB     $42      ; .*....*.
        DB     $3C      ; ..****..

;************** Cart reset vector **************************

        org     $bffd
        DB   $FF         ;Don't display Atari logo
        DW   Start       ;start code at $4000
```

- ESC
- E
- ACT65 B:PMDEMO
- MLOAD B:PMDEMO.BIN=PMDEMO.HEX
- B:
- A:W PMDEMO.BIN
- Load in Altirra

* REFERENCES

Atari Macro Assembler Manual
https://www.trailingedge.com/atari8/AtariMacroAssembler.pdf

MicroPro WordMaster 1.0 Manual
https://wiki.polaire.nl/lib/exe/fetch.php?media=micropro_wordmaster.pdf

Dan Boris' PMDEMO:
https://www.atarihq.com/danb/files/52pm.txt

CP/M 2.2 User Manual:
http://www.cpm.z80.de/manuals/cpm22-m.pdf

MLOAD source code:
https://raw.githubusercontent.com/z80playground/cpm-fat/main/mload.asm

Udo Monk's Z80PACK Emulation Suite:
https://github.com/udo-munk/z80pack

Curt Vendel's Source-Code-Palooza (source code dump from Atari 9-track tapes):
https://forums.atariage.com/topic/210244-source-code-palooza/

The Definitive Atari 2600 Combat Disassembly:
https://www.qotile.net/minidig/disassembly/dicombat.asm

